[{"path":"https://mkparkin.github.io/Rinvent/articles/AzureBlobConnection.html","id":"create-blob-connection","dir":"Articles","previous_headings":"","what":"Create Blob Connection","title":"Azure-Blob-Connection","text":"go Azure Portal choose related storage container https://portal.azure.com/ Check left menu “Access Keys”. Copy Key “your_key” link storage account something like https://mystorage.blob.core.windows.net/, put link instead “your_link” run following code your_connection = AzureStor::storage_container(AzureStor::storage_endpoint(your_link, key=your_key), “your_container”) Tip: put Key connection string local config file. .e. read config myazurecongif <- read.config(“C:/Users/yourname/Documents/yourfile”) blob <- AzureStor::storage_endpoint(endpoint = myazurecongif[link],key = myazurecongif[key]) your_connection <- AzureStor::storage_container(blob, “containername”) Check AzureStor ","code":""},{"path":"https://mkparkin.github.io/Rinvent/articles/installation.html","id":"sample-data","dir":"Articles","previous_headings":"","what":"Sample Data","title":"Sample-Usage","text":"","code":"# install.packages(\"devtools\") # you need to install devtools if you don't have it devtools::install_github(\"mkparkin/Rinvent\",upgrade=\"never\") # if you want to upgrade related packages, remove that parameter"},{"path":"https://mkparkin.github.io/Rinvent/articles/Sample-Usage.html","id":"exampledatar","dir":"Articles","previous_headings":"","what":"exampleDataR","title":"Sample-Usage","text":"","code":"# sample data library(Rinvent) head(exampleDataR) #>   location   item       date sales #> 1 istanbul coffee 10/29/1923    27 #> 2 istanbul coffee 10/30/1923    31 #> 3 istanbul coffee 10/31/1923    31 #> 4 istanbul coffee  11/1/1923    22 #> 5 istanbul coffee  11/2/1923     3 #> 6 istanbul coffee  11/3/1923    28"},{"path":"https://mkparkin.github.io/Rinvent/articles/Sample-Usage.html","id":"mar","dir":"Articles","previous_headings":"","what":"maR","title":"Sample-Usage","text":"","code":"library(Rinvent) exampleDataR= data.table::as.data.table(exampleDataR) exampleDataR = exampleDataR[order(location,item,date)] exampleDataR[,ma5:= maR(sales,4),list(location,item)] head(exampleDataR,10) #>     location item      date sales   ma5 #>  1:   ankara  tea 4/23/1920    22    NA #>  2:   ankara  tea 4/24/1920    30 22.00 #>  3:   ankara  tea 4/25/1920    29 26.00 #>  4:   ankara  tea 4/26/1920    34 27.00 #>  5:   ankara  tea 4/27/1920     9 28.75 #>  6:   ankara  tea 4/28/1920    15 25.50 #>  7:   ankara  tea 4/29/1920    40 21.75 #>  8:   ankara  tea 4/30/1920     7 24.50 #>  9:   ankara  tea  5/1/1920    26 17.75 #> 10:   ankara  tea 5/10/1920    39 22.00"},{"path":"https://mkparkin.github.io/Rinvent/articles/Sample-Usage.html","id":"readparquetr","dir":"Articles","previous_headings":"","what":"readparquetR","title":"Sample-Usage","text":"","code":"temp <- tempfile() arrow::write_parquet(mtcars, paste(temp,\".parquet\")) readparquetR(paste(temp,\".parquet\")) #>      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #>  1: 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #>  2: 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #>  3: 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #>  4: 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #>  5: 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #>  6: 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #>  7: 14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #>  8: 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #>  9: 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10: 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 11: 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 12: 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> 13: 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> 14: 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> 15: 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> 16: 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> 17: 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> 18: 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 19: 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 20: 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 21: 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 22: 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> 23: 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> 24: 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> 25: 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> 26: 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 27: 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 28: 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 29: 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> 30: 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> 31: 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> 32: 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #>      mpg cyl  disp  hp drat    wt  qsec vs am gear carb  readparquetR(pathtoread=paste(temp,\".parquet\"), sample=T) #>    mpg cyl disp  hp drat   wt  qsec vs am gear carb #> 1:  21   6  160 110  3.9 2.62 16.46  0  1    4    4  readparquetR(pathtoread=paste(temp,\".parquet\"),               collist = c(\"mpg\",\"cyl\",\"vs\"),              format=\"parquet\",              where=\"cyl==4 & vs!='0'\") #>      mpg cyl vs #>  1: 22.8   4  1 #>  2: 24.4   4  1 #>  3: 22.8   4  1 #>  4: 32.4   4  1 #>  5: 30.4   4  1 #>  6: 33.9   4  1 #>  7: 21.5   4  1 #>  8: 27.3   4  1 #>  9: 30.4   4  1 #> 10: 21.4   4  1"},{"path":"https://mkparkin.github.io/Rinvent/articles/Sample-Usage.html","id":"date_to_yyyymmdd","dir":"Articles","previous_headings":"","what":"date_to_yyyymmdd","title":"Sample-Usage","text":"","code":"date_to_yyyymmdd(\"2022-02-28\") #> [1] \"2022-02-28\" date_to_yyyymmdd(\"02/28/2022\") #> [1] \"2022-02-28\" date_to_yyyymmdd(\"28.02.2022\") #> [1] \"2022-02-28\" date_to_yyyymmdd(\"Feb 28, 2022\") #> [1] \"2022-02-28\" date_to_yyyymmdd(\"28.02.2022\", smart_format = F ,forceformat=\"%d.%m.%Y\" ) #> [1] \"2022-02-28\""},{"path":"https://mkparkin.github.io/Rinvent/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"korayp. Maintainer.","code":""},{"path":"https://mkparkin.github.io/Rinvent/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, ) p (2024). Rinvent: Useful simple functions R work cloud data analysis. R package version 1.1.5, https://github.com/mkparkin/Rinvent/.","code":"@Manual{,   title = {Rinvent: Useful simple functions for R to work with cloud and data analysis},   author = {{c} and person )},   year = {2024},   note = {R package version 1.1.5},   url = {https://github.com/mkparkin/Rinvent/}, }"},{"path":[]},{"path":"https://mkparkin.github.io/Rinvent/index.html","id":"intro-page","dir":"","previous_headings":"","what":"Intro Page","title":"Useful simple functions for R to work with cloud and data analysis","text":"Package Introduction First Time Install List Functions","code":""},{"path":"https://mkparkin.github.io/Rinvent/index.html","id":"working-with-azure-blob-parquet-delta-csv-formats","dir":"","previous_headings":"Intro Page","what":"Working with Azure Blob: Parquet, Delta, CSV formats","title":"Useful simple functions for R to work with cloud and data analysis","text":"readparquetR read_csv_azure write_to_blob","code":""},{"path":"https://mkparkin.github.io/Rinvent/index.html","id":"working-with-aws-s3-parquet-delta-formats","dir":"","previous_headings":"Intro Page","what":"Working with Aws S3: Parquet, Delta formats","title":"Useful simple functions for R to work with cloud and data analysis","text":"readparquetR write_to_S3","code":""},{"path":"https://mkparkin.github.io/Rinvent/index.html","id":"forecast-related","dir":"","previous_headings":"Intro Page","what":"Forecast Related","title":"Useful simple functions for R to work with cloud and data analysis","text":"maR accu","code":""},{"path":"https://mkparkin.github.io/Rinvent/index.html","id":"data-review--engineering","dir":"","previous_headings":"Intro Page","what":"Data Review & Engineering","title":"Useful simple functions for R to work with cloud and data analysis","text":"crossjoin uniquen","code":""},{"path":"https://mkparkin.github.io/Rinvent/index.html","id":"date-formatting","dir":"","previous_headings":"Intro Page","what":"Date formatting","title":"Useful simple functions for R to work with cloud and data analysis","text":"fast.date faster_date week_start date_to_yyyymmdd","code":""},{"path":"https://mkparkin.github.io/Rinvent/index.html","id":"others","dir":"","previous_headings":"Intro Page","what":"Others","title":"Useful simple functions for R to work with cloud and data analysis","text":"lsos gcQuiet","code":""},{"path":"https://mkparkin.github.io/Rinvent/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Useful simple functions for R to work with cloud and data analysis","text":"Checklist MR Clone repo development branch Increase version number DESCRIPTION Add NEWS.md release notes documentation, can use “devtools::document()” Run devtools::build_readme() update README.md pkgdown::build_site() website update . make sure working, can click “Build” RStudio top menu click “Clean Rebuild”","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/accu.html","id":null,"dir":"Reference","previous_headings":"","what":"forecast accuracy — accu","title":"forecast accuracy — accu","text":"measure critical metrics forecasting","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/accu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"forecast accuracy — accu","text":"","code":"accu(actual, forecast, outlist = \"mean,FBias,WMAPE\")"},{"path":"https://mkparkin.github.io/Rinvent/reference/accu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"forecast accuracy — accu","text":"actual target column predict forecast prediction column outlist export column. available options: n,mean,sd,CV,R2,DB,FBias,MPE,MAPE,RMSE,MAD,MADP,MASE,RAE,WMAPE","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/accu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"forecast accuracy — accu","text":"","code":"accu(actual=105,forecast=100,outlist=\"mean,WMAPE,FBias\") #>   mean      WMAPE      FBias #> 1  105 0.04761905 0.04761905"},{"path":"https://mkparkin.github.io/Rinvent/reference/crossjoin.html","id":null,"dir":"Reference","previous_headings":"","what":"table cross join — crossjoin","title":"table cross join — crossjoin","text":"table cross join","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/crossjoin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"table cross join — crossjoin","text":"","code":"crossjoin(t1, t2)"},{"path":"https://mkparkin.github.io/Rinvent/reference/crossjoin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"table cross join — crossjoin","text":"t1 table 1 t2 table 2","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/crossjoin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"table cross join — crossjoin","text":"crossjoin()","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/crossjoin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"table cross join — crossjoin","text":"","code":"exampleDataR = data.table::as.data.table(exampleDataR) location_list = exampleDataR[,.N,list(location)] item_list = exampleDataR[,.N,list(item)] crossjoin(t1=location_list, t2=item_list) #>      item  N location i.N #> 1: coffee 30 istanbul  30 #> 2:    tea 30 istanbul  30 #> 3: coffee 30   ankara  30 #> 4:    tea 30   ankara  30"},{"path":"https://mkparkin.github.io/Rinvent/reference/date_mdy_ymd.html","id":null,"dir":"Reference","previous_headings":"","what":"change date format — date_mdy_ymd","title":"change date format — date_mdy_ymd","text":"find latest sunday date","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/date_mdy_ymd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"change date format — date_mdy_ymd","text":"","code":"date_mdy_ymd(x)"},{"path":"https://mkparkin.github.io/Rinvent/reference/date_mdy_ymd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"change date format — date_mdy_ymd","text":"x date value","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/date_mdy_ymd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"change date format — date_mdy_ymd","text":"","code":"exampleDataR= data.table::as.data.table(exampleDataR) exampleDataR = exampleDataR[order(location,item,date)] exampleDataR[,date_better:= date_mdy_ymd(date)] #>     location   item       date sales date_better #>  1:   ankara    tea  4/23/1920    22  1920-04-23 #>  2:   ankara    tea  4/24/1920    30  1920-04-24 #>  3:   ankara    tea  4/25/1920    29  1920-04-25 #>  4:   ankara    tea  4/26/1920    34  1920-04-26 #>  5:   ankara    tea  4/27/1920     9  1920-04-27 #>  6:   ankara    tea  4/28/1920    15  1920-04-28 #>  7:   ankara    tea  4/29/1920    40  1920-04-29 #>  8:   ankara    tea  4/30/1920     7  1920-04-30 #>  9:   ankara    tea   5/1/1920    26  1920-05-01 #> 10:   ankara    tea  5/10/1920    39  1920-05-10 #> 11:   ankara    tea  5/11/1920    39  1920-05-11 #> 12:   ankara    tea  5/12/1920    12  1920-05-12 #> 13:   ankara    tea  5/13/1920     2  1920-05-13 #> 14:   ankara    tea  5/14/1920    29  1920-05-14 #> 15:   ankara    tea  5/15/1920     7  1920-05-15 #> 16:   ankara    tea  5/16/1920     0  1920-05-16 #> 17:   ankara    tea  5/17/1920    35  1920-05-17 #> 18:   ankara    tea  5/18/1920    34  1920-05-18 #> 19:   ankara    tea  5/19/1920    20  1920-05-19 #> 20:   ankara    tea   5/2/1920    25  1920-05-02 #> 21:   ankara    tea  5/20/1920     2  1920-05-20 #> 22:   ankara    tea  5/21/1920    30  1920-05-21 #> 23:   ankara    tea  5/22/1920    30  1920-05-22 #> 24:   ankara    tea   5/3/1920    30  1920-05-03 #> 25:   ankara    tea   5/4/1920     0  1920-05-04 #> 26:   ankara    tea   5/5/1920     1  1920-05-05 #> 27:   ankara    tea   5/6/1920     4  1920-05-06 #> 28:   ankara    tea   5/7/1920    35  1920-05-07 #> 29:   ankara    tea   5/8/1920    20  1920-05-08 #> 30:   ankara    tea   5/9/1920    28  1920-05-09 #> 31: istanbul coffee 10/29/1923    27  1923-10-29 #> 32: istanbul coffee 10/30/1923    31  1923-10-30 #> 33: istanbul coffee 10/31/1923    31  1923-10-31 #> 34: istanbul coffee  11/1/1923    22  1923-11-01 #> 35: istanbul coffee 11/10/1923     6  1923-11-10 #> 36: istanbul coffee 11/11/1923    37  1923-11-11 #> 37: istanbul coffee 11/12/1923    22  1923-11-12 #> 38: istanbul coffee 11/13/1923    32  1923-11-13 #> 39: istanbul coffee 11/14/1923    25  1923-11-14 #> 40: istanbul coffee 11/15/1923    22  1923-11-15 #> 41: istanbul coffee 11/16/1923    20  1923-11-16 #> 42: istanbul coffee 11/17/1923     3  1923-11-17 #> 43: istanbul coffee 11/18/1923    39  1923-11-18 #> 44: istanbul coffee 11/19/1923    26  1923-11-19 #> 45: istanbul coffee  11/2/1923     3  1923-11-02 #> 46: istanbul coffee 11/20/1923    21  1923-11-20 #> 47: istanbul coffee 11/21/1923    27  1923-11-21 #> 48: istanbul coffee 11/22/1923     1  1923-11-22 #> 49: istanbul coffee 11/23/1923    10  1923-11-23 #> 50: istanbul coffee 11/24/1923    33  1923-11-24 #> 51: istanbul coffee 11/25/1923    23  1923-11-25 #> 52: istanbul coffee 11/26/1923    28  1923-11-26 #> 53: istanbul coffee 11/27/1923     6  1923-11-27 #> 54: istanbul coffee  11/3/1923    28  1923-11-03 #> 55: istanbul coffee  11/4/1923    30  1923-11-04 #> 56: istanbul coffee  11/5/1923    30  1923-11-05 #> 57: istanbul coffee  11/6/1923    35  1923-11-06 #> 58: istanbul coffee  11/7/1923    32  1923-11-07 #> 59: istanbul coffee  11/8/1923     2  1923-11-08 #> 60: istanbul coffee  11/9/1923     9  1923-11-09 #>     location   item       date sales date_better head(exampleDataR,15) #>     location item      date sales date_better #>  1:   ankara  tea 4/23/1920    22  1920-04-23 #>  2:   ankara  tea 4/24/1920    30  1920-04-24 #>  3:   ankara  tea 4/25/1920    29  1920-04-25 #>  4:   ankara  tea 4/26/1920    34  1920-04-26 #>  5:   ankara  tea 4/27/1920     9  1920-04-27 #>  6:   ankara  tea 4/28/1920    15  1920-04-28 #>  7:   ankara  tea 4/29/1920    40  1920-04-29 #>  8:   ankara  tea 4/30/1920     7  1920-04-30 #>  9:   ankara  tea  5/1/1920    26  1920-05-01 #> 10:   ankara  tea 5/10/1920    39  1920-05-10 #> 11:   ankara  tea 5/11/1920    39  1920-05-11 #> 12:   ankara  tea 5/12/1920    12  1920-05-12 #> 13:   ankara  tea 5/13/1920     2  1920-05-13 #> 14:   ankara  tea 5/14/1920    29  1920-05-14 #> 15:   ankara  tea 5/15/1920     7  1920-05-15"},{"path":"https://mkparkin.github.io/Rinvent/reference/date_to_yyyymmdd.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert date string to YYYY-MM-DD format — date_to_yyyymmdd","title":"Convert date string to YYYY-MM-DD format — date_to_yyyymmdd","text":"function attempts detect format date string convert YYYY-MM-DD format.","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/date_to_yyyymmdd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert date string to YYYY-MM-DD format — date_to_yyyymmdd","text":"","code":"date_to_yyyymmdd(date_str, smart_format = T, forceformat = \"%Y.%m.%d\")"},{"path":"https://mkparkin.github.io/Rinvent/reference/date_to_yyyymmdd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert date string to YYYY-MM-DD format — date_to_yyyymmdd","text":"date_str character string representing date unknown format. smart_format T, try detect format. otherwise force format forceformat make effective, smart_format False","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/date_to_yyyymmdd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert date string to YYYY-MM-DD format — date_to_yyyymmdd","text":"","code":"date_to_yyyymmdd('2022-02-28') #> [1] \"2022-02-28\" date_to_yyyymmdd('02/28/2022') #> [1] \"2022-02-28\" date_to_yyyymmdd('28.02.2022') #> [1] \"2022-02-28\" date_to_yyyymmdd('Feb 28, 2022') #> [1] \"2022-02-28\""},{"path":"https://mkparkin.github.io/Rinvent/reference/exampleDataR.html","id":null,"dir":"Reference","previous_headings":"","what":"Sales data for two locations — exampleDataR","title":"Sales data for two locations — exampleDataR","text":"location, item, date level sales data","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/exampleDataR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sales data for two locations — exampleDataR","text":"","code":"exampleDataR"},{"path":"https://mkparkin.github.io/Rinvent/reference/exampleDataR.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sales data for two locations — exampleDataR","text":"data frame 60 rows 4 columns, 2 location 2 item: location city location, istanbul ankara item sales two items, coffee tea date sales dates. 30 days sales random sales figures 0 40","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/exampleDataR.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sales data for two locations — exampleDataR","text":"https://github.com/mkparkin/Rinvent","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/fast.date.html","id":null,"dir":"Reference","previous_headings":"","what":"fast date conversion — fast.date","title":"fast date conversion — fast.date","text":"works faster .Date.","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/fast.date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fast date conversion — fast.date","text":"","code":"fast.date(x)"},{"path":"https://mkparkin.github.io/Rinvent/reference/fast.date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fast date conversion — fast.date","text":"x date column convert","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/fast.date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fast date conversion — fast.date","text":"","code":"fast.date(as.factor('2021-01-01')) #> [1] \"2021-01-01\""},{"path":"https://mkparkin.github.io/Rinvent/reference/faster_date.html","id":null,"dir":"Reference","previous_headings":"","what":"faster date conversion — faster_date","title":"faster date conversion — faster_date","text":"works faster fast.date","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/faster_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"faster date conversion — faster_date","text":"","code":"faster_date(dt, dateCol = \"Date\")"},{"path":"https://mkparkin.github.io/Rinvent/reference/faster_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"faster date conversion — faster_date","text":"dt # data table dateCol # date column name","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/faster_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"faster date conversion — faster_date","text":"","code":"exampleDataR = data.table::as.data.table(exampleDataR) exampleDataR = exampleDataR[,dateformat:= date_mdy_ymd(date)] #> Error in date_mdy_ymd(date): could not find function \"date_mdy_ymd\" faster_date(exampleDataR,\"dateformat\") #> Error in data.table::setnames(dt, dateCol_a, \"SuperDummyDate\"): Items of 'old' not found in column names: [dateformat]. Consider skip_absent=TRUE."},{"path":"https://mkparkin.github.io/Rinvent/reference/gcQuiet.html","id":null,"dir":"Reference","previous_headings":"","what":"gc without printed message — gcQuiet","title":"gc without printed message — gcQuiet","text":"gcQuiet","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/gcQuiet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gc without printed message — gcQuiet","text":"","code":"gcQuiet(quiet = TRUE)"},{"path":"https://mkparkin.github.io/Rinvent/reference/gcQuiet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gc without printed message — gcQuiet","text":"quiet T F.","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/gcQuiet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"gc without printed message — gcQuiet","text":"","code":"gcQuiet()"},{"path":"https://mkparkin.github.io/Rinvent/reference/lsos.html","id":null,"dir":"Reference","previous_headings":"","what":"list variables and size — lsos","title":"list variables and size — lsos","text":"list variables size r memory","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/lsos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list variables and size — lsos","text":"","code":"lsos(..., n = 10)"},{"path":"https://mkparkin.github.io/Rinvent/reference/lsos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"list variables and size — lsos","text":"n top N rows","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/lsos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"list variables and size — lsos","text":"","code":"data = data.table::as.data.table(exampleDataR) lsos() #> Error in is.na(obj.dim)[, 1]: subscript out of bounds"},{"path":"https://mkparkin.github.io/Rinvent/reference/maR.html","id":null,"dir":"Reference","previous_headings":"","what":"moving average of a column — maR","title":"moving average of a column — maR","text":"moving average column. enough records, take average whatever can. .e. period_cound=5 data 3 values take average three. forget sort data frame. probably based date","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/maR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"moving average of a column — maR","text":"","code":"maR(value, period_count, align = \"right\", gap = 1)"},{"path":"https://mkparkin.github.io/Rinvent/reference/maR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"moving average of a column — maR","text":"value column name take average period_count average period count align average past=\"right\" average future=\"left\". default right. gap timelag avg value vs row. .e. want avg one day lag, type gap=1. default 1.","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/maR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"moving average of a column — maR","text":"","code":"exampleDataR= data.table::as.data.table(exampleDataR) exampleDataR = exampleDataR[order(location,item,date)] exampleDataR[,ma5:= maR(sales,4),list(location,item)] #>     location   item       date sales      ma5 #>  1:   ankara    tea  4/23/1920    22       NA #>  2:   ankara    tea  4/24/1920    30 22.00000 #>  3:   ankara    tea  4/25/1920    29 26.00000 #>  4:   ankara    tea  4/26/1920    34 27.00000 #>  5:   ankara    tea  4/27/1920     9 28.75000 #>  6:   ankara    tea  4/28/1920    15 25.50000 #>  7:   ankara    tea  4/29/1920    40 21.75000 #>  8:   ankara    tea  4/30/1920     7 24.50000 #>  9:   ankara    tea   5/1/1920    26 17.75000 #> 10:   ankara    tea  5/10/1920    39 22.00000 #> 11:   ankara    tea  5/11/1920    39 28.00000 #> 12:   ankara    tea  5/12/1920    12 27.75000 #> 13:   ankara    tea  5/13/1920     2 29.00000 #> 14:   ankara    tea  5/14/1920    29 23.00000 #> 15:   ankara    tea  5/15/1920     7 20.50000 #> 16:   ankara    tea  5/16/1920     0 12.50000 #> 17:   ankara    tea  5/17/1920    35  9.50000 #> 18:   ankara    tea  5/18/1920    34 17.75000 #> 19:   ankara    tea  5/19/1920    20 19.00000 #> 20:   ankara    tea   5/2/1920    25 22.25000 #> 21:   ankara    tea  5/20/1920     2 28.50000 #> 22:   ankara    tea  5/21/1920    30 20.25000 #> 23:   ankara    tea  5/22/1920    30 19.25000 #> 24:   ankara    tea   5/3/1920    30 21.75000 #> 25:   ankara    tea   5/4/1920     0 23.00000 #> 26:   ankara    tea   5/5/1920     1 22.50000 #> 27:   ankara    tea   5/6/1920     4 15.25000 #> 28:   ankara    tea   5/7/1920    35  8.75000 #> 29:   ankara    tea   5/8/1920    20 10.00000 #> 30:   ankara    tea   5/9/1920    28 15.00000 #> 31: istanbul coffee 10/29/1923    27       NA #> 32: istanbul coffee 10/30/1923    31 27.00000 #> 33: istanbul coffee 10/31/1923    31 29.00000 #> 34: istanbul coffee  11/1/1923    22 29.66667 #> 35: istanbul coffee 11/10/1923     6 27.75000 #> 36: istanbul coffee 11/11/1923    37 22.50000 #> 37: istanbul coffee 11/12/1923    22 24.00000 #> 38: istanbul coffee 11/13/1923    32 21.75000 #> 39: istanbul coffee 11/14/1923    25 24.25000 #> 40: istanbul coffee 11/15/1923    22 29.00000 #> 41: istanbul coffee 11/16/1923    20 25.25000 #> 42: istanbul coffee 11/17/1923     3 24.75000 #> 43: istanbul coffee 11/18/1923    39 17.50000 #> 44: istanbul coffee 11/19/1923    26 21.00000 #> 45: istanbul coffee  11/2/1923     3 22.00000 #> 46: istanbul coffee 11/20/1923    21 17.75000 #> 47: istanbul coffee 11/21/1923    27 22.25000 #> 48: istanbul coffee 11/22/1923     1 19.25000 #> 49: istanbul coffee 11/23/1923    10 13.00000 #> 50: istanbul coffee 11/24/1923    33 14.75000 #> 51: istanbul coffee 11/25/1923    23 17.75000 #> 52: istanbul coffee 11/26/1923    28 16.75000 #> 53: istanbul coffee 11/27/1923     6 23.50000 #> 54: istanbul coffee  11/3/1923    28 22.50000 #> 55: istanbul coffee  11/4/1923    30 21.25000 #> 56: istanbul coffee  11/5/1923    30 23.00000 #> 57: istanbul coffee  11/6/1923    35 23.50000 #> 58: istanbul coffee  11/7/1923    32 30.75000 #> 59: istanbul coffee  11/8/1923     2 31.75000 #> 60: istanbul coffee  11/9/1923     9 24.75000 #>     location   item       date sales      ma5 head(exampleDataR,15) #>     location item      date sales   ma5 #>  1:   ankara  tea 4/23/1920    22    NA #>  2:   ankara  tea 4/24/1920    30 22.00 #>  3:   ankara  tea 4/25/1920    29 26.00 #>  4:   ankara  tea 4/26/1920    34 27.00 #>  5:   ankara  tea 4/27/1920     9 28.75 #>  6:   ankara  tea 4/28/1920    15 25.50 #>  7:   ankara  tea 4/29/1920    40 21.75 #>  8:   ankara  tea 4/30/1920     7 24.50 #>  9:   ankara  tea  5/1/1920    26 17.75 #> 10:   ankara  tea 5/10/1920    39 22.00 #> 11:   ankara  tea 5/11/1920    39 28.00 #> 12:   ankara  tea 5/12/1920    12 27.75 #> 13:   ankara  tea 5/13/1920     2 29.00 #> 14:   ankara  tea 5/14/1920    29 23.00 #> 15:   ankara  tea 5/15/1920     7 20.50"},{"path":"https://mkparkin.github.io/Rinvent/reference/readparquetR.html","id":null,"dir":"Reference","previous_headings":"","what":"reading parquet or delta files from local directory or aws s3 or azure blob — readparquetR","title":"reading parquet or delta files from local directory or aws s3 or azure blob — readparquetR","text":"reads parquet,delta files local cloud","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/readparquetR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reading parquet or delta files from local directory or aws s3 or azure blob — readparquetR","text":"","code":"readparquetR(   pathtoread,   where = \"\",   partition = NULL,   collist = \"\",   sample = F,   samplesizecount = 3,   add_part_names = F,   format = \"parquet\",   filelocation = \"local\",   containerconnection = NULL,   bucket = NULL )"},{"path":"https://mkparkin.github.io/Rinvent/reference/readparquetR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reading parquet or delta files from local directory or aws s3 or azure blob — readparquetR","text":"pathtoread reading path, local azure cloud read datatable filter condition. .e. can write =\"column=''\" partition want read partition files pattern. .e. partition=c('2017','2018') collist specific columns read sample sample=T just see sample rows. dont read whole table samplesizecount default=3 rows. can change add_part_names partitioned, need make T add partition names column filelocation \"local\" \"azure\" \"s3\" containerconnection filelocation=\"azure\" need connection name Azure Helper Document bucket filelocation=\"s3\" need put bucket name","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/readparquetR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"reading parquet or delta files from local directory or aws s3 or azure blob — readparquetR","text":"","code":"temp <- tempfile() arrow::write_parquet(mtcars, paste(temp,\".parquet\")) head(readparquetR(pathtoread=paste(temp,\".parquet\")),10) #>      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #>  1: 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #>  2: 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #>  3: 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #>  4: 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #>  5: 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #>  6: 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #>  7: 14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #>  8: 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #>  9: 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10: 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4   # read sample rows   readparquetR(pathtoread=paste(temp,\".parquet\"), sample=T) #>    mpg cyl disp  hp drat   wt  qsec vs am gear carb #> 1:  21   6  160 110  3.9 2.62 16.46  0  1    4    4   # column select and apply where condition   readparquetR(pathtoread=paste(temp,\".parquet\"),               collist = c(\"mpg\",\"cyl\",\"vs\"),               format=\"parquet\",               where=\"cyl==4 & vs!='0'\") #>      mpg cyl vs #>  1: 22.8   4  1 #>  2: 24.4   4  1 #>  3: 22.8   4  1 #>  4: 32.4   4  1 #>  5: 30.4   4  1 #>  6: 33.9   4  1 #>  7: 21.5   4  1 #>  8: 27.3   4  1 #>  9: 30.4   4  1 #> 10: 21.4   4  1"},{"path":"https://mkparkin.github.io/Rinvent/reference/read_csv_azure.html","id":null,"dir":"Reference","previous_headings":"","what":"read csv files from azure blob — read_csv_azure","title":"read csv files from azure blob — read_csv_azure","text":"read_csv_azure read csv files azure blob","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/read_csv_azure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read csv files from azure blob — read_csv_azure","text":"","code":"read_csv_azure(file_path, containerconnection)"},{"path":"https://mkparkin.github.io/Rinvent/reference/read_csv_azure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read csv files from azure blob — read_csv_azure","text":"containerconnection blob connection pathtoread blob path read","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/read_csv_azure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read csv files from azure blob — read_csv_azure","text":"","code":"read_csv_azure() #> Error in strsplit(file_path, \"/\"): argument \"file_path\" is missing, with no default"},{"path":"https://mkparkin.github.io/Rinvent/reference/uniquen.html","id":null,"dir":"Reference","previous_headings":"","what":"count unique values in a table — uniquen","title":"count unique values in a table — uniquen","text":"count unique values table","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/uniquen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"count unique values in a table — uniquen","text":"","code":"uniquen(data)"},{"path":"https://mkparkin.github.io/Rinvent/reference/uniquen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"count unique values in a table — uniquen","text":"data input data table","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/uniquen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"count unique values in a table — uniquen","text":"","code":"uniquen(exampleDataR) #> location     item     date    sales  #>        2        2       60       29"},{"path":"https://mkparkin.github.io/Rinvent/reference/week_start.html","id":null,"dir":"Reference","previous_headings":"","what":"find latest sunday — week_start","title":"find latest sunday — week_start","text":"find latest sunday date","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/week_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find latest sunday — week_start","text":"","code":"week_start(date)"},{"path":"https://mkparkin.github.io/Rinvent/reference/week_start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find latest sunday — week_start","text":"date date value","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/week_start.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find latest sunday — week_start","text":"","code":"exampleDataR= data.table::as.data.table(exampleDataR) exampleDataR = exampleDataR[order(location,item,date)] exampleDataR = exampleDataR[,date:= date_mdy_ymd(date)] #> Error in date_mdy_ymd(date): could not find function \"date_mdy_ymd\" exampleDataR[,week_start_date:= week_start(date)] #> Error in charToDate(x): character string is not in a standard unambiguous format head(exampleDataR,15) #>     location item      date sales #>  1:   ankara  tea 4/23/1920    22 #>  2:   ankara  tea 4/24/1920    30 #>  3:   ankara  tea 4/25/1920    29 #>  4:   ankara  tea 4/26/1920    34 #>  5:   ankara  tea 4/27/1920     9 #>  6:   ankara  tea 4/28/1920    15 #>  7:   ankara  tea 4/29/1920    40 #>  8:   ankara  tea 4/30/1920     7 #>  9:   ankara  tea  5/1/1920    26 #> 10:   ankara  tea 5/10/1920    39 #> 11:   ankara  tea 5/11/1920    39 #> 12:   ankara  tea 5/12/1920    12 #> 13:   ankara  tea 5/13/1920     2 #> 14:   ankara  tea 5/14/1920    29 #> 15:   ankara  tea 5/15/1920     7"},{"path":"https://mkparkin.github.io/Rinvent/reference/write_to_blob.html","id":null,"dir":"Reference","previous_headings":"","what":"write_to_blob — write_to_blob","title":"write_to_blob — write_to_blob","text":"Writes data Azure Blob storage container using specified format","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/write_to_blob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write_to_blob — write_to_blob","text":"","code":"write_to_blob(   data,   templocalpath = \"default\",   savename = \"my_df.parquet\",   containerconnection = NULL,   blobfilepath = \"trial\",   format = \"parquet\",   overwrite = FALSE )"},{"path":"https://mkparkin.github.io/Rinvent/reference/write_to_blob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write_to_blob — write_to_blob","text":"data data object write Azure Blob storage templocalpath path temporary local directory use intermediate files (default new directory system temp directory) savename name use file Azure Blob storage containerconnection connection Azure Blob storage container blobfilepath path within container write file (default root container) format format use writing data (one \"parquet\", \"rds\", \"csv\") overwrite overwrite existing file (one \"parquet\", \"rds\", \"csv\")","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/write_to_blob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"write_to_blob — write_to_blob","text":"Write data Azure Blob storage container","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/write_to_blob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"write_to_blob — write_to_blob","text":"","code":"write_to_blob(datatable,               savename = \"data.parquet\",               containerconnection = mycontainer,               blobfilepath = file.path(\"mainfolder\", \"subfolder\"),               overwrite=FALSE               ) #> Error in paste0(container$name, operation): object 'mycontainer' not found"},{"path":"https://mkparkin.github.io/Rinvent/reference/write_to_S3.html","id":null,"dir":"Reference","previous_headings":"","what":"save your files to Amazon S3 with ","title":"save your files to Amazon S3 with ","text":"save files tryCatch() implement retry capability","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/write_to_S3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"save your files to Amazon S3 with ","text":"","code":"write_to_S3(df, format, object, bucket)"},{"path":"https://mkparkin.github.io/Rinvent/reference/write_to_S3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"save your files to Amazon S3 with ","text":"df, format, object, bucket","code":""},{"path":"https://mkparkin.github.io/Rinvent/reference/write_to_S3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"save your files to Amazon S3 with ","text":"","code":"write_to_S3(df = results_df, format = \"csv\", object = file.path(\"target_s3_path.csv\"), bucket = \"bucket_name\") #> [1] \"Couldn't write in the first try.\" #> [1] \"Now trying again...\" #> Warning: restarting interrupted promise evaluation #> Error in FUN(x, tmp, ...): object 'results_df' not found"}]
